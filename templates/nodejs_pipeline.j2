pipeline {
    agent any
    parameters {
        string(name: 'GIT_REPO', defaultValue: '{{ repo_url }}', description: 'Git Repository URL')
        string(name: 'GIT_BRANCH', defaultValue: '{{ branch }}', description: 'Branch to build')
        string(name: 'BUILD_TOOL', defaultValue: '{{ build_tool }}', description: 'Build Tool (npm)')
        string(name: 'DOCKERFILE_DIR', defaultValue: 'path/to/dockerfiles', description: 'Directory where Dockerfile is located')
        string(name: 'DOCKER_IMAGE', defaultValue: 'my-nodejs-image', description: 'Docker Image')
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'Docker Tag')
        string(name: 'DOCKERHUB_CREDENTIALS_ID', defaultValue: 'dockerhub-credentials', description: 'Docker Hub Credentials ID')
        string(name: 'NAMESPACE', defaultValue: '{{ namespace }}', description: 'Namespace to deploy to')
        string(name: 'JOB_NAME', defaultValue: 'test', description: 'Job Name')
        string(name: 'MANIFESTS_DIR', defaultValue: 'manifests', description: 'Directory to store manifest files')
        string(name: 'KUBE_CREDENTIALS_ID', defaultValue: 'k8s-credentials', description: 'Kubernetes Credentials ID')
        string(name: 'DOCKERHUB_USERNAME', defaultValue: '', description: 'Docker Hub Username')
    }
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code from Git repository...'
                script {
                    git url: "${params.GIT_REPO}", branch: "${params.GIT_BRANCH}"
                }
            }
        }
        stage('Build') {
            steps {
                echo 'Building the application...'
                script {
                    if (params.BUILD_TOOL == 'npm') {
                        sh 'npm install'
                    } else {
                        error 'Invalid build tool specified'
                    }
                }
            }
            post {
                success {
                    archiveArtifacts '*' // Archive the built application files
                }
            }
        }
        stage('Create Docker Image') {
            steps {
                script {
                    def dockerfileContent = '''
                    FROM node:14-alpine
                    WORKDIR /app
                    COPY . .
                    '''
                    dockerfileContent += 'CMD ["npm", "start"]'

                    // Specify the directory to store the Dockerfile
                    def dockerfilePath = "${params.DOCKERFILE_DIR}/Dockerfile"

                    // Write Dockerfile to the specified directory
                    writeFile file: dockerfilePath, text: dockerfileContent

                    // Output the path where Dockerfile is stored
                    echo "Generated Dockerfile stored at: ${params.DOCKERFILE_DIR}"
                }
            }
        }
        stage('Docker Build') {
            steps {
                echo 'Building Docker image...'
                script {
                    def dockerBuildArgs = "-f ${params.DOCKERFILE_DIR}/Dockerfile"
                    if (params.BUILD_TOOL == 'npm') {
                        // No additional build args needed for npm
                    } else {
                        error 'Invalid build tool specified'
                    }
                    withCredentials([usernamePassword(credentialsId: params.DOCKERHUB_CREDENTIALS_ID, usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        def buildStatus = sh(script: "docker build ${dockerBuildArgs} -t ${DOCKERHUB_USERNAME}/${params.DOCKER_IMAGE}:${params.DOCKER_TAG} .", returnStatus: true)
                        if (buildStatus != 0) {
                            error 'Failed to build Docker image'
                        }
                    }
                }
            }
        }
        stage('Docker Push') {
            steps {
                echo 'Pushing Docker image to registry...'
                script {
                    withCredentials([usernamePassword(credentialsId: params.DOCKERHUB_CREDENTIALS_ID, usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        sh "docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD"
                        def pushStatus = sh(script: "docker push ${DOCKERHUB_USERNAME}/${params.DOCKER_IMAGE}:${params.DOCKER_TAG}", returnStatus: true)
                        if (pushStatus != 0) {
                            error 'Failed to push Docker image'
                        }
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                echo 'Deploying application to Kubernetes...'
                script {
                    // Dynamically generate the deployment manifest
                    def deploymentManifest = """
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${params.JOB_NAME}
  namespace: ${params.NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${params.JOB_NAME}
  template:
    metadata:
      labels:
        app: ${params.JOB_NAME}
    spec:
      containers:
      - name: ${params.JOB_NAME}
        image: ${DOCKERHUB_USERNAME}/${params.DOCKER_IMAGE}:${params.DOCKER_TAG}
        ports:
        - containerPort: 3000
"""
                    // Write deployment manifest to a file
                    writeFile file: "${params.MANIFESTS_DIR}/deployment.yaml", text: deploymentManifest

                    // Dynamically generate the service manifest
                    def serviceManifest = """
apiVersion: v1
kind: Service
metadata:
  name: ${params.JOB_NAME}-service
  namespace: ${params.NAMESPACE}
spec:
  selector:
    app: ${params.JOB_NAME}
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: LoadBalancer
"""
                    // Write service manifest to a file
                    writeFile file: "${params.MANIFESTS_DIR}/service.yaml", text: serviceManifest

                    // Apply the manifests using Kubernetes credentials
                    withKubeConfig(credentialsId: params.KUBE_CREDENTIALS_ID) {
                        sh "kubectl apply -f ${params.MANIFESTS_DIR}/deployment.yaml"
                        sh "kubectl apply -f ${params.MANIFESTS_DIR}/service.yaml"
                    }
                }
            }
        }
    }
    post {
        success {
            echo 'Archiving manifest files...'
            archiveArtifacts artifacts: "${params.MANIFESTS_DIR}/*.yaml", onlyIfSuccessful: true
        }
    }
}
