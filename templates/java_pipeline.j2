pipeline {
    agent any
    parameters {
        string(name: 'GIT_REPO', defaultValue: '{{ repo_url }}', description: 'Git Repository URL')
        string(name: 'GIT_BRANCH', defaultValue: '{{ branch }}', description: 'Branch to build')
        string(name: 'BUILD_TOOL', defaultValue: '{{ build_tool }}', description: 'Build Tool (maven/gradle)')
        string(name: 'DOCKER_IMAGE', defaultValue: 'my-docker-image', description: 'Docker Image')
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'Docker Tag')
        string(name: 'DOCKERHUB_CREDENTIALS_ID', defaultValue: 'dockerhub-credentials', description: 'Docker Hub Credentials ID')
        string(name: 'NAMESPACE', defaultValue: '{{ namespace }}', description: 'Namespace to deploy to')
        string(name: 'JOB_NAME', defaultValue: 'test', description: 'Job Name')
    }
    tools {
        maven 'maven3.9.6'
    }
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code from Git repository...'
                script {
                    git url: "${params.GIT_REPO}", branch: "${params.GIT_BRANCH}"
                }
            }
        }
        stage('Build') {
            steps {
                echo 'Building the application...'
                script {
                    if (params.BUILD_TOOL == 'maven') {
                        sh 'mvn clean package'
                    } else if (params.BUILD_TOOL == 'gradle') {
                        sh 'gradle build'
                    } else {
                        error 'Invalid build tool specified'
                    }
                }
            }
            post {
                success {
                    archiveArtifacts 'target/*.war' // Archive the built WAR files
                }
            }
        }
        stage('Create Docker Image') {
            steps {
                script {
                    def dockerfileContent = '''
                    FROM openjdk:17-jdk-slim
                    WORKDIR /app
                    '''
                    if (params.BUILD_TOOL == 'maven') {
                        dockerfileContent += 'COPY target/*.war app.war\n'
                    } else if (params.BUILD_TOOL == 'gradle') {
                        dockerfileContent += 'COPY build/libs/*.war app.war\n'
                    } else {
                        error 'Invalid build tool specified'
                    }

                    dockerfileContent += 'ENTRYPOINT ["java", "-jar", "app.war"]'

                    writeFile file: 'Dockerfile', text: dockerfileContent
                }
            }
        }
        stage('Docker Build') {
            steps {
                echo 'Building Docker image...'
                script {
                    def dockerBuildArgs = ''
                    if (params.BUILD_TOOL == 'maven') {
                        dockerBuildArgs = "--build-arg WAR_FILE=target/*.war"
                    } else if (params.BUILD_TOOL == 'gradle') {
                        dockerBuildArgs = "--build-arg WAR_FILE=build/libs/*.war"
                    }
                    withCredentials([usernamePassword(credentialsId: params.DOCKERHUB_CREDENTIALS_ID, usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        def buildStatus = sh(script: "docker build -t ${DOCKERHUB_USERNAME}/${params.DOCKER_IMAGE}:${params.DOCKER_TAG} ${dockerBuildArgs} .", returnStatus: true)
                        if (buildStatus != 0) {
                            error 'Failed to build Docker image'
                        }
                    }
                }
            }
        }
        stage('Docker Push') {
            steps {
                echo 'Pushing Docker image to registry...'
                script {
                    withCredentials([usernamePassword(credentialsId: params.DOCKERHUB_CREDENTIALS_ID, usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        sh "docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD"
                        def pushStatus = sh(script: "docker push ${DOCKERHUB_USERNAME}/${params.DOCKER_IMAGE}:${params.DOCKER_TAG}", returnStatus: true)
                        if (pushStatus != 0) {
                            error 'Failed to push Docker image'
                        }
                    }
                }
            }
        }
        stage('Helm Deploy') {
            steps {
                echo 'Deploying application using Helm...'
                script {
                    sh "helm upgrade --install ${params.JOB_NAME} ./helm-chart --namespace ${params.NAMESPACE} --set image.tag=${params.DOCKER_IMAGE}:${params.DOCKER_TAG}"
                }
            }
        }
    }
}
